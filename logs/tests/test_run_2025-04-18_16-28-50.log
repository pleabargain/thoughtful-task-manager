2025-04-18 16:28:50 [    INFO] Starting test session. Logging to: C:\Users\denni\Documents\thoughtful task manager\logs\tests\test_run_2025-04-18_16-28-50.log (conftest.py:70)
2025-04-18 16:28:50 [    INFO] Test passed: test_task_from_dict_with_id (conftest.py:82)
2025-04-18 16:28:50 [    INFO] Test passed: test_task_with_id_parameter (conftest.py:82)
2025-04-18 16:28:50 [    INFO] Test passed: test_file_handler_load_tasks_structure (conftest.py:82)
2025-04-18 16:28:50 [    INFO] Test passed: test_priority_validation_direct (conftest.py:82)
2025-04-18 16:28:50 [    INFO] Test passed: test_load_tasks_empty_file (conftest.py:82)
2025-04-18 16:28:50 [    INFO] Test passed: test_load_tasks_direct_list (conftest.py:82)
2025-04-18 16:28:50 [    INFO] Test passed: test_load_tasks_with_tasks_key (conftest.py:82)
2025-04-18 16:28:50 [    INFO] Test passed: test_save_and_load_tasks (conftest.py:82)
2025-04-18 16:28:50 [    INFO] Test passed: test_client_initialization (conftest.py:82)
2025-04-18 16:28:54 [    INFO] Test passed: test_connection_retry (conftest.py:82)
2025-04-18 16:28:54 [    INFO] Test passed: test_model_list_command (conftest.py:82)
2025-04-18 16:28:54 [    INFO] Test passed: test_model_name_parsing (conftest.py:82)
2025-04-18 16:28:54 [    INFO] Test passed: test_model_verification_failure (conftest.py:82)
2025-04-18 16:28:56 [    INFO] Test passed: test_ollama_service_running (conftest.py:82)
2025-04-18 16:28:56 [   ERROR] Test failed: test_load_tasks (conftest.py:84)
2025-04-18 16:28:56 [   ERROR] Failure details:
task_manager = <src.main.TaskManager object at 0x0000023EA5737FE0>, test_data_file = 'C:\\Users\\denni\\AppData\\Local\\Temp\\pytest-of-denni\\pytest-7\\test_load_tasks0\\test_tasks.json'
sample_tasks = [{'created_at': '2024-04-18T10:00:00', 'description': 'Write comprehensive documentation for the project including set...00', 'description': 'Perform code review and address linting issues', 'due_date': '2024-04-20', 'id': 'task-003', ...}]

    def test_load_tasks(task_manager, test_data_file, sample_tasks):
        """Test loading tasks from a file."""
        # Write sample tasks to the test file
        with open(test_data_file, 'w') as f:
            json.dump({'tasks': sample_tasks}, f)
    
        # Create a new manager instance to load the tasks
        manager = TaskManager(data_file=test_data_file)
        loaded_tasks = manager.list_tasks()
    
        assert len(loaded_tasks) == len(sample_tasks)
>       assert loaded_tasks[0]['id'] == sample_tasks[0]['id']
E       TypeError: 'Task' object is not subscriptable

tests\test_run.py:34: TypeError (conftest.py:86)
2025-04-18 16:28:57 [   ERROR] Test failed: test_add_task (conftest.py:84)
2025-04-18 16:28:57 [   ERROR] Failure details:
task_manager = <src.main.TaskManager object at 0x0000023EA5756E70>

    def test_add_task(task_manager):
        """Test adding a new task."""
        new_task = {
            'id': 'task-004',
            'title': 'New Test Task',
            'status': 'pending',
            'priority': 'medium',
            'due_date': '2024-04-30'
        }
    
        added_task = task_manager.add_task(new_task)
>       assert added_task['id'] == new_task['id']
E       TypeError: 'Task' object is not subscriptable

tests\test_run.py:48: TypeError (conftest.py:86)
2025-04-18 16:28:57 [   ERROR] Test failed: test_update_task (conftest.py:84)
2025-04-18 16:28:57 [   ERROR] Failure details:
task_manager = <src.main.TaskManager object at 0x0000023EA57564E0>
sample_tasks = [{'created_at': '2024-04-18T10:00:00', 'description': 'Write comprehensive documentation for the project including set...00', 'description': 'Perform code review and address linting issues', 'due_date': '2024-04-20', 'id': 'task-003', ...}]

    def test_update_task(task_manager, sample_tasks):
        """Test updating an existing task."""
        # First add a task
        task_manager.add_task(sample_tasks[0])
    
        # Update the task
        update_data = {
            'status': 'completed',
            'priority': 'high'
        }
    
        updated_task = task_manager.update_task(sample_tasks[0]['id'], update_data)
>       assert updated_task['status'] == 'completed'
E       TypeError: 'NoneType' object is not subscriptable

tests\test_run.py:65: TypeError (conftest.py:86)
2025-04-18 16:28:57 [   ERROR] Test failed: test_delete_task (conftest.py:84)
2025-04-18 16:28:57 [   ERROR] Failure details:
task_manager = <src.main.TaskManager object at 0x0000023EA5755B20>
sample_tasks = [{'created_at': '2024-04-18T10:00:00', 'description': 'Write comprehensive documentation for the project including set...00', 'description': 'Perform code review and address linting issues', 'due_date': '2024-04-20', 'id': 'task-003', ...}]

    def test_delete_task(task_manager, sample_tasks):
        """Test deleting a task."""
        # First add a task
        task_manager.add_task(sample_tasks[0])
    
        # Delete the task
        success = task_manager.delete_task(sample_tasks[0]['id'])
>       assert success is True
E       assert False is True

tests\test_run.py:76: AssertionError (conftest.py:86)
2025-04-18 16:28:57 [   ERROR] Test failed: test_get_task (conftest.py:84)
2025-04-18 16:28:57 [   ERROR] Failure details:
task_manager = <src.main.TaskManager object at 0x0000023EA5756630>
sample_tasks = [{'created_at': '2024-04-18T10:00:00', 'description': 'Write comprehensive documentation for the project including set...00', 'description': 'Perform code review and address linting issues', 'due_date': '2024-04-20', 'id': 'task-003', ...}]

    def test_get_task(task_manager, sample_tasks):
        """Test getting a specific task."""
        # First add a task
        task_manager.add_task(sample_tasks[0])
    
        # Get the task
        task = task_manager.get_task(sample_tasks[0]['id'])
>       assert task is not None
E       assert None is not None

tests\test_run.py:88: AssertionError (conftest.py:86)
2025-04-18 16:28:57 [    INFO] Test passed: test_task_creation (conftest.py:82)
2025-04-18 16:28:57 [    INFO] Test passed: test_task_to_dict (conftest.py:82)
2025-04-18 16:28:57 [    INFO] Test passed: test_task_from_dict (conftest.py:82)
2025-04-18 16:28:57 [    INFO] Test passed: test_task_with_id (conftest.py:82)
2025-04-18 16:28:57 [    INFO] Test passed: test_task_to_dict_with_id (conftest.py:82)
2025-04-18 16:28:57 [    INFO] Test passed: test_task_from_dict_with_id (conftest.py:82)
2025-04-18 16:28:57 [    INFO] Test passed: test_priority_validation_string (conftest.py:82)
2025-04-18 16:28:57 [    INFO] Test passed: test_priority_validation_out_of_range_high (conftest.py:82)
2025-04-18 16:28:57 [    INFO] Test passed: test_priority_validation_out_of_range_low (conftest.py:82)
2025-04-18 16:28:57 [   ERROR] Test failed: test_priority_validation_non_integer (conftest.py:84)
2025-04-18 16:28:57 [   ERROR] Failure details:
def test_priority_validation_non_integer():
        """Test that priority is set to default when non-integer."""
        task = Task(
            title="Test Task",
            description="Test Description",
            priority="high"  # Non-integer string
        )
>       assert task.priority == 3  # Should be set to default (3)
E       AssertionError: assert 5 == 3
E        +  where 5 = Task(title='Test Task', description='Test Description', id=None, dependencies=[], status='pending', priority=5, created_date=datetime.datetime(2025, 4, 18, 16, 28, 57, 106924), due_date=None).priority

tests\test_task_model.py:82: AssertionError (conftest.py:86)
2025-04-18 16:29:02 [    INFO] Test passed: test_complete_task_lifecycle (conftest.py:82)
2025-04-18 16:29:06 [    INFO] Test passed: test_delete_task (conftest.py:82)
2025-04-18 16:29:11 [   ERROR] Test failed: test_task_priority_validation (conftest.py:84)
2025-04-18 16:29:11 [   ERROR] Failure details:
self = <tests.test_user_input.TestUserInput testMethod=test_task_priority_validation>, mock_ask = <MagicMock name='ask' id='2468087025968'>

    @patch('rich.prompt.Prompt.ask')
    def test_task_priority_validation(self, mock_ask):
        """Test that task priority is validated correctly."""
        # Mock user inputs with invalid then valid priority
        mock_ask.side_effect = [
            "2",  # Add task
            "Priority Test Task",  # Task title
            "Testing priority validation",  # Description
            "10",  # Invalid priority (out of range)
            "3",  # Valid priority
            "8"   # Exit
        ]
    
        # Run the application with mocked input
        with patch('rich.console.Console.print') as mock_print:
            try:
                self.task_manager.run()
            except SystemExit:
                pass  # Expected when exiting
            except ValueError:
                self.fail("Priority validation failed")
    
        # Verify task was created with correct priority
        tasks = self.task_manager.list_tasks()
        self.assertEqual(len(tasks), 1)
>       self.assertEqual(tasks[0].priority, 3)
E       AssertionError: 5 != 3

tests\test_user_input.py:101: AssertionError (conftest.py:86)
2025-04-18 16:29:11 [    INFO] Test session completed (conftest.py:72)
